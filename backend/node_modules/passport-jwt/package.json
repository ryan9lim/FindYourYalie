{
  "_args": [
    [
      {
        "raw": "git+https://github.com/themikenicholson/passport-jwt.git",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git+https://github.com/themikenicholson/passport-jwt.git",
        "spec": "git+https://github.com/themikenicholson/passport-jwt.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:themikenicholson/passport-jwt.git",
          "sshUrl": "git+ssh://git@github.com/themikenicholson/passport-jwt.git",
          "httpsUrl": "git+https://github.com/themikenicholson/passport-jwt.git",
          "gitUrl": "git://github.com/themikenicholson/passport-jwt.git",
          "shortcut": "github:themikenicholson/passport-jwt",
          "directUrl": "https://raw.githubusercontent.com/themikenicholson/passport-jwt/master/package.json"
        }
      },
      "C:\\Users\\Limmy\\AndroidStudioProjects\\FindYourYalie\\backend"
    ]
  ],
  "_from": "git+https://github.com/themikenicholson/passport-jwt.git",
  "_id": "passport-jwt@2.2.1",
  "_inCache": true,
  "_location": "/passport-jwt",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git+https://github.com/themikenicholson/passport-jwt.git",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git+https://github.com/themikenicholson/passport-jwt.git",
    "spec": "git+https://github.com/themikenicholson/passport-jwt.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:themikenicholson/passport-jwt.git",
      "sshUrl": "git+ssh://git@github.com/themikenicholson/passport-jwt.git",
      "httpsUrl": "git+https://github.com/themikenicholson/passport-jwt.git",
      "gitUrl": "git://github.com/themikenicholson/passport-jwt.git",
      "shortcut": "github:themikenicholson/passport-jwt",
      "directUrl": "https://raw.githubusercontent.com/themikenicholson/passport-jwt/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git+https://github.com/themikenicholson/passport-jwt.git#6ff2a4a63ff6e3475fc0fb28207221e9ca4d3d48",
  "_shasum": "cae0692bffddf6d1ac93cb348564ff10fa5acb9a",
  "_shrinkwrap": null,
  "_spec": "git+https://github.com/themikenicholson/passport-jwt.git",
  "_where": "C:\\Users\\Limmy\\AndroidStudioProjects\\FindYourYalie\\backend",
  "author": {
    "name": "Mike Nicholson"
  },
  "bugs": {
    "url": "https://github.com/themikenicholson/passport-jwt/issues"
  },
  "dependencies": {
    "jsonwebtoken": "^7.0.0",
    "passport-strategy": "^1.0.0"
  },
  "description": "Passport authentication strategy using JSON Web Tokens",
  "devDependencies": {
    "chai": "^3.0.0",
    "chai-passport-strategy": "^1.0.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.0.0",
    "sinon": "^1.0.0"
  },
  "gitHead": "6ff2a4a63ff6e3475fc0fb28207221e9ca4d3d48",
  "homepage": "https://github.com/themikenicholson/passport-jwt",
  "keywords": [
    "Passport",
    "Strategy",
    "JSON",
    "Web",
    "Token",
    "JWT"
  ],
  "license": "MIT",
  "main": "./lib",
  "name": "passport-jwt",
  "optionalDependencies": {},
  "readme": "\r\n\r\n# passport-jwt\r\n\r\n[![Build Status](https://travis-ci.org/themikenicholson/passport-jwt.svg?branch=master)](https://travis-ci.org/themikenicholson/passport-jwt)\r\n\r\nA [Passport](http://passportjs.org/) strategy for authenticating with a\r\n[JSON Web Token](http://jwt.io).\r\n\r\nThis module lets you authenticate endpoints using a JSON web token. It is\r\nintended to be used to secure RESTful endpoints without sessions.\r\n\r\n## Install\r\n\r\n    npm install passport-jwt\r\n\r\n## Usage\r\n\r\n### Configure Strategy\r\n\r\nThe JWT authentication strategy is constructed as follows:\r\n\r\n    new JwtStrategy(options, verify)\r\n\r\n`options` is an object literal containing options to control how the token is\r\nextracted from the request or verified.\r\n\r\n* `secretOrKey` is a REQUIRED string or buffer containing the secret\r\n  (symmetric) or PEM-encoded public key (asymmetric) for verifying the token's\r\n  signature.\r\n\r\n* `jwtFromRequest` (REQUIRED) Function that accepts a request as the only\r\n  parameter and returns either the JWT as a string or *null*. See \r\n  [Extracting the JWT from the request](#extracting-the-jwt-from-the-request) for\r\n  more details.\r\n* `issuer`: If defined the token issuer (iss) will be verified against this\r\n  value.\r\n* `audience`: If defined, the token audience (aud) will be verified against\r\n  this value.\r\n* `algorithms`: List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\r\n* `ignoreExpiration`: if true do not validate the expiration of the token.\r\n* `passReqToCallback`: If true the request will be passed to the verify\r\n  callback. i.e. verify(request, jwt_payload, done_callback).\r\n\r\n`verify` is a function with the parameters `verify(jwt_payload, done)`\r\n\r\n* `jwt_payload` is an object literal containing the decoded JWT payload.\r\n* `done` is a passport error first callback accepting arguments\r\n  done(error, user, info)\r\n\r\nAn example configuration which reads the JWT from the http\r\nAuthorization header with the scheme 'JWT':\r\n\r\n```js\r\nvar JwtStrategy = require('passport-jwt').Strategy,\r\n    ExtractJwt = require('passport-jwt').ExtractJwt;\r\nvar opts = {}\r\nopts.jwtFromRequest = ExtractJwt.fromAuthHeader();\r\nopts.secretOrKey = 'secret';\r\nopts.issuer = \"accounts.examplesoft.com\";\r\nopts.audience = \"yoursite.net\";\r\npassport.use(new JwtStrategy(opts, function(jwt_payload, done) {\r\n    User.findOne({id: jwt_payload.sub}, function(err, user) {\r\n        if (err) {\r\n            return done(err, false);\r\n        }\r\n        if (user) {\r\n            done(null, user);\r\n        } else {\r\n            done(null, false);\r\n            // or you could create a new account\r\n        }\r\n    });\r\n}));\r\n```\r\n\r\n### Extracting the JWT from the request\r\n\r\nThere are a number of ways the JWT may be included in a request.  In order to remain as flexible as\r\npossible the JWT is parsed from the request by a user-supplied callback passed in as the\r\n`jwtFromRequest` parameter.  This callback, from now on referred to as an extractor,\r\naccepts a request object as an argument and returns the encoded JWT string or *null*.\r\n\r\n#### Included extractors \r\n\r\nA number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory\r\nfunctions return a new extractor configured with the given parameters.\r\n\r\n* ```fromHeader(header_name)``` creates a new extractor that looks for the JWT in the given http\r\n  header\r\n* ```fromBodyField(field_name)``` creates a new extractor that looks for the JWT in the given body\r\n  field.  You must have a body parser configured in order to use this method.\r\n* ```fromUrlQueryParameter(param_name)``` creates a new extractor that looks for the JWT in the given\r\n  URL query parameter.\r\n* ```fromAuthHeaderWithScheme(auth_scheme)``` creates a new extractor that looks for the JWT in the\r\n  authorization header, expecting the scheme to match auth_scheme.\r\n* ```fromAuthHeader()``` creates a new extractor that looks for the JWT in the authorization header\r\n  with the scheme 'JWT'\r\n* ```fromExtractors([array of extractor functions])``` creates a new extractor using an array of\r\n  extractors provided. Each extractor is attempted in order until one returns a token.\r\n\r\n### Writing a custom extractor function\r\n\r\nIf the supplied extractors don't meet your needs you can easily provide your own callback. For\r\nexample, if you are using the cookie-parser middleware and want to extract the JWT in a cookie \r\nyou could use the following function as the argument to the jwtFromRequest option:\r\n\r\n```\r\nvar cookieExtractor = function(req) {\r\n    var token = null;\r\n    if (req && req.cookies)\r\n    {\r\n        token = req.cookies['jwt'];\r\n    }\r\n    return token;\r\n};\r\n```\r\n\r\n### Authenticate requests\r\n\r\nUse `passport.authenticate()` specifying `'JWT'` as the strategy.\r\n\r\n```js\r\napp.post('/profile', passport.authenticate('jwt', { session: false}),\r\n    function(req, res) {\r\n        res.send(req.user.profile);\r\n    }\r\n);\r\n```\r\n\r\n### Include the JWT in requests\r\n\r\nThe strategy will first check the request for the standard *Authorization*\r\nheader. If this header is present and the scheme matches `options.authScheme`\r\nor 'JWT' if no auth scheme was specified then the token will be retrieved from\r\nit. e.g.\r\n\r\n    Authorization: JWT JSON_WEB_TOKEN_STRING.....\r\n\r\nIf the authorization header with the expected scheme is not found, the request\r\nbody will be checked for a field matching either `options.tokenBodyField` or\r\n`auth_token` if the option was not specified.\r\n\r\nFinally, the URL query parameters will be checked for a field matching either\r\n`options.tokenQueryParameterName` or `auth_token` if the option was not\r\nspecified.\r\n\r\n## Migrating from version 1.x.x to 2.x.x\r\n\r\nThe v2 API is not backwards compatible with v1, specifically with regards to the introduction\r\nof the concept of JWT extractor functions.  If you require the legacy behavior in v1 you can use\r\nthe extractor function ```versionOneCompatibility(options)```\r\n\r\n*options* is an object with any of the three custom JWT extraction options present in the v1\r\nconstructor:\r\n* `tokenBodyField`: Field in a request body to search for the JWT.\r\n  Default is auth_token.\r\n* `tokenQueryParameterName`: Query parameter name containing the token.\r\n  Default is auth_token.\r\n* `authScheme`: Expected authorization scheme if token is submitted through\r\n  the HTTP Authorization header. Defaults to JWT\r\n\r\nIf in v1 you constructed the strategy like this:\r\n\r\n```js\r\nvar JwtStrategy = require('passport-jwt').Strategy;\r\nvar opts = {}\r\nopts.tokenBodyField = \"MY_CUSTOM_BODY_FIELD\";\r\nopts.secretOrKey = 'secret';\r\nopts.issuer = \"accounts.examplesoft.com\";\r\nopts.audience = \"yoursite.net\";\r\npassport.use(new JwtStrategy(opts, verifyFunction));\r\n```\r\n\r\nIdentical behavior can be achieved under v2 with the versionOneCompatibility extractor:\r\n\r\n```js\r\nvar JwtStrategy = require('passport-jwt').Strategy,\r\n    ExtractJwt = require('passport-jwt').ExtractJwt;\r\nvar opts = {}\r\nopts.jwtFromRequest = ExtractJwt.versionOneCompatibility({ tokenBodyField = \"MY_CUSTOM_BODY_FIELD\" });\r\nopts.opts.secretOrKey = 'secret';\r\nopts.issuer = \"accounts.examplesoft.com\";\r\nopts.audience = \"yoursite.net\";\r\npassport.use(new JwtStrategy(opts, verifyFunction));\r\n```\r\n\r\n\r\n## Tests\r\n\r\n    npm install\r\n    npm test\r\n\r\nTo generate test-coverage reports:\r\n\r\n    npm install -g istanbul\r\n    npm run-script testcov\r\n    istanbul report\r\n\r\n## License\r\n\r\nThe [MIT License](http://opensource.org/licenses/MIT)\r\n\r\nCopyright (c) 2015 Mike Nicholson\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/themikenicholson/passport-jwt.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --require test/bootstrap test/*test.js",
    "testcov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter spec --require test/bootstrap test/*test.js"
  },
  "version": "2.2.1"
}
